package com.cs4520.assignment1.repository

import android.content.Context
import com.cs4520.assignment1.api.ApiService
import com.cs4520.assignment1.models.Product
import com.cs4520.assignment1.models.ProductEntity
import com.cs4520.assignment1.utils.NetworkUtils
import com.cs4520.assignment1.utils.Result
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

class ProductRepository(private val apiService: ApiService, private val productDao: ProductDao, private val context: Context) {

    suspend fun getProducts(page: Int?): Result<List<Product>> = withContext(Dispatchers.IO){
        return@withContext if (NetworkUtils.isNetworkAvailable(context)) {
            try {
                val response = apiService.getProducts(page)
                if (response.isSuccessful) {
                    response.body()?.let { products ->
                        val productEntities = products.map { it.toEntity() }
                        productDao.insertProducts(productEntities)
                        Result.Success(products)
                    } ?: Result.Empty
                } else {
                    Result.Error(Exception("API Error: ${response.message()}"))
                }
            } catch (e: Exception) {
                Result.Error(e)
            }
        } else {
            val products = productDao.getAllProducts().map { it.toProduct() }
            if (products.isNotEmpty()) Result.Success(products) else Result.Empty
        }
    }

    private fun Product.toEntity(): ProductEntity {
        return ProductEntity(
            id = 0, // ID will be auto-generated by Room
            name = this.name,
            type = when (this) {
                is Product.Food -> "Food"
                is Product.Equipment -> "Equipment"
            },
            expiryDate = this.expiryDate,
            price = this.price.toDouble()
        )
    }

    private fun ProductEntity.toProduct(): Product {
        return when (this.type) {
            "Food" -> Product.Food(name, expiryDate, price.toString())
            "Equipment" -> Product.Equipment(name, expiryDate, price.toString())
            else -> throw IllegalArgumentException("Invalid product type: $type")
        }
    }
}
